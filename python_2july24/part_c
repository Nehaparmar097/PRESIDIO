# 1. Longest Substring Without Repeating Characters
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        start = 0
        cmap = {}
        ans = 0
        for end in range(len(s)):
            if s[end] in cmap:
                start = max(start, cmap[s[end]] + 1)
            cmap[s[end]] = end
            ans = max(ans, end - start + 1)
        return ans
===================================================================================


# 2. Zigzag Conversion
class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
        arr = [""] * numRows
        start, down = 0, True
        for c in s:
            arr[start] += c
            if start == numRows - 1:
                down = False
            elif start == 0:
                down = True
            start += 1 if down else -1
        return "".join(arr)
=================================================================================



# 3. 3Sum Closest
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        diff = float('inf')
        for i in range(len(nums) - 1):
            start, end = i + 1, len(nums) - 1
            while start < end:
                sum = nums[i] + nums[start] + nums[end]
                if sum == target:
                    return target
                if abs(target - sum) < diff:
                    diff = abs(target - sum)
                    ans = sum
                if sum > target:
                    end -= 1
                else:
                    start += 1
        return ans
===============================================================================




# 4. Generate Parentheses
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        ans = []
        def backtrack(open, close, s):
            if open == n and close == n:
                ans.append(s)
                return
            if open < n:
                backtrack(open + 1, close, s + '(')
            if close < n and open > close:
                backtrack(open, close + 1, s + ')')
        backtrack(0, 0, "")
        return ans
================================================================================


# 5. Multiply Strings
class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        if num1 == '0' or num2 == '0':
            return '0'
        def toInt(num):
            ans = 0
            for i in num:
                ans = ans * 10 + (ord(i) - ord('0'))
            return ans
        def toStr(s):
            res = ''
            while s:
                res = chr(ord('0') + s % 10) + res
                s //= 10
            return res
        return toStr(toInt(num1) * toInt(num2))=
======================================================================




# 6. Group Anagrams
from collections import defaultdict
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        mapper = defaultdict(list)
        for s in strs:
            sorted_s = ''.join(sorted(s))
            mapper[sorted_s].append(s)
        return list(mapper.values())
================================================================================




# 7. Multiply Strings


class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        if num1 == '0' or num2 == '0':
            return '0'
        
        def toInt(num):
            ans = 0
            for i in num:
                ans = ans*10 +(ord(i) - ord('0'))
            return ans

        def toStr(s):
            news = ''
            while s:
                a = s % 10
                s = s // 10
                news = chr(ord('0') + a) + news
            return news
        
        return toStr(toInt(num1)*toInt(num2))

==================================================================================






# 8. Jump Game
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        jump = 0
        for i in nums:
            jump = max(jump, i)
            jump -= 1
            if jump < 0:
                return False
        return True
================================================================================



# 9. Unique Paths
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        if m == 1 or n == 1:
            return 1
        dp = [[1] * n for _ in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[m - 1][n - 1]

==================================================================================


# 10. Justify Content
class Solution:
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        result, line, line_length = [], [], 0
        for word in words:
            if line_length + len(line) + len(word) <= maxWidth:
                line.append(word)
                line_length += len(word)
            else:
                result.append(line)
                line, line_length = [word], len(word)
        result.append(line)
        
        justified_lines = []
        for i in range(len(result) - 1):
            line = result[i]
            num_spaces = maxWidth - sum(len(word) for word in line)
            space_gaps = max(len(line) - 1, 1)
            spaces_per_gap = num_spaces // space_gaps
            extra_spaces = num_spaces % space_gaps
            justified_line = ""
            for word in line:
                justified_line += word
                if space_gaps > 0:
                    justified_line += " " * (spaces_per_gap + (1 if extra_spaces > 0 else 0))
                    extra_spaces -= 1
                    space_gaps -= 1
            justified_lines.append(justified_line)

        last_line = " ".join(result[-1])
        last_line += " " * (maxWidth - len(last_line))
        justified_lines.append(last_line)

        return justified_lines


